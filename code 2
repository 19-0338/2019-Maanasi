#include <kipr/botball.h>
int right_motor, left_motor, left_light_sensor, right_light_sensor, bucket_claw, claw_arm, claw, motor_difference;//ports
double bias; //variable to hold the calibration value
int black, line_follow;
int main()
{
    int open = 300;
    int close = 900;
    black = 3700;
    line_follow = 3400;
	left_motor = 0;
    right_motor = 1;
    declare_motors(0, 1);
    left_light_sensor = 0;
    right_light_sensor = 1;
    //bucket_arm = 2;
    claw_arm = 0;
    claw = 1;
    motor_difference = 0;
    cg();
    bias-=2.0;
    //wait_for_light(light_sensor);
    //shut_down_in(118);
    enable_servos();
   	//slow_servo(claw_arm, 200);
    /*
  	turn_with_gyro(-500, 200, 600000.0);
    drive_with_gyro(-800, 2700.0);
    mav(left_motor, 0);
    mav(right_motor, 0);
    drive_with_gyro(600, 11000.0);
    turn_with_gyro(-200, 500, 590000.0);
    */
    while(analog(right_light_sensor)<black){//3200 when light
        printf("%2d\n", analog(right_light_sensor));
   		line_following_right(10, line_follow);//2800 when light
    }
    /**
    drive_with_gyro(600, 2000.0);
    printf("before");
    square_up_line(-1);
    printf("after");
    drive_with_gyro(600, 1500.0);
	*/
    /**
    turn_with_gyro(-500, 500, 650000.0);

  // turn_with_gyro(-500, 500, 580000.0);
    drive_with_gyro(-600, 10000.0);
    square_up_line(1);
    drive_with_gyro(500, 2000.0);

    turn_with_gyro(-200, 500, 875000.0);

    drive_with_gyro(-600, 2000.0);
	*/
    turn_with_gyro(500, -500, 580000.0);
	drive_with_gyro(500, 2000.0);
	turn_with_gyro(500, -500, 580000.0);
    drive_with_gyro(500, 2000.0);
    square_up_line(-1);
    turn_with_gyro(-500, 500, 310000.0);
    drive_with_gyro(-500, 2500.0);
    slow_servo(claw_arm, 1);
    set_servo_position(claw, open);
    drive_with_gyro(500, 3000.0);
    set_servo_position(claw, close);
    msleep(1000);
   // turn_with_gyro();
/**
    drive back and square up
    move forward, past the gray line until the black line
   	line follow the black line until the middle pipe, squaring up
    back up then turn left
    go forward, then get the bin
    move the bin onto our side of the field
    move back then turn 180 
    move until the blue line
    line follow the blue line while collecting the poms(collection method still unclear)
    move off of the blue line until the black one?
    drop the bucket and poms off
    do more?
    */
    return 0;
}
void line_following_right(int distance, int threshold){//threshold=white, uses the left light sensor
	clear_motor_position_counter(left_motor);
	clear_motor_position_counter(right_motor);
    int num = 0;
    while(get_motor_position_counter(0)<distance && get_motor_position_counter(1)<distance){
        if(analog(left_light_sensor)<threshold){//on white
            mav(right_motor, 740);
            mav(left_motor, 700);
            msleep(1);	
            num++;
        }
        else{
            mav(left_motor, 850);
            mav(right_motor, 590);
            msleep(1);	
        }
    }
}


//void pickUpPoms()
/**
pick up the poms
*/

//from here down: gyro code

//initializes the ports for the motors.
void declare_motors(int lmotor, int rmotor)
{
    right_motor = rmotor;
    left_motor = lmotor;
}

//Gyroscopes are always off by a specific angular velocity so we need to subtract this bias from all readings.
//Call calibrate_gyro to find what the gyroscope reads when the robot is at a complete stop (this is what the bias is). 
//The bias may change between turning the robot on when compared to the bias that the gyroscope has when it starts moving.
void calibrate_gyro()
{
   	//takes the average of 50 readings
    int i = 0;
    double avg = 0;
    while(i < 50)
    {
        avg += gyro_z();
        msleep(1);
        i++;
    }
    bias = avg / 50.0;
    printf("New Bias: %f\n", bias);//prints out your bias. COMMENT THIS LINE OUT IF YOU DON'T WANT BIAS READINGS PRINTED OUT
}

//the same as calibrate_gyro() except faster to type
void cg()
{
    calibrate_gyro();
}
		
//turns the robot to reach a desired theta. 
//If you are expecting this function to work consistantly then don't take your turns too fast.
//The conversions from each wallaby to normal degrees varies but usually ~580000 KIPR degrees = 90 degrees
void turn_with_gyro(int left_wheel_speed, int right_wheel_speed, double targetTheta)
{
    double theta = 0;//declares the variable that stores the current degrees
    mav(right_motor, right_wheel_speed);//starts the motors
    mav(left_motor, left_wheel_speed);
    //keeps the motors running until the robot reaches the desired angle
    while(theta < targetTheta)
    {
        msleep(10);//turns for .01 seconds
        theta += abs(gyro_z() - bias) * 10;//theta = omega(angular velocity, the value returned by gyroscopes) * time
    }
    //stops the motors after reaching the turn
    mav(right_motor, 0);
    mav(left_motor, 0);
}

//drives straight forward or backwards. The closer speed is to 0 the faster it will correct itself and the more consistent it will be but just do not go at max speed. Time is in ms. 
void drive_with_gyro(int speed, double time)
{ 
    double startTime = seconds();
    double theta = 0;
    while(seconds() - startTime < (time / 1000.0))
    {
        if(speed > 0)
        {
            mav(right_motor, (double)(speed - speed * (1.920137e-16 + 0.000004470956*theta - 7.399285e-28*pow(theta, 2) - 2.054177e-18*pow(theta, 3) + 1.3145e-40*pow(theta, 4))));  //here at NAR, we are VERY precise
            mav(left_motor, (double)(speed + speed * (1.920137e-16 + 0.000004470956*theta - 7.399285e-28*pow(theta, 2) - 2.054177e-18*pow(theta, 3) + 1.3145e-40*pow(theta, 4))));
        }
        else//reverses corrections if it is going backwards
        {
            mav(right_motor, (double)(speed + speed * (1.920137e-16 + 0.000004470956*theta - 7.399285e-28*pow(theta, 2) - 2.054177e-18*pow(theta, 3) + 1.3145e-40*pow(theta, 4)))); 
            mav(left_motor, (double)(speed - speed * (1.920137e-16 + 0.000004470956*theta - 7.399285e-28*pow(theta, 2) - 2.054177e-18*pow(theta, 3) + 1.3145e-40*pow(theta, 4))));
        }
        //updates theta
        msleep(10);
        theta += (gyro_z() - bias) * 10;
    }
}

void simple_drive_with_gyro(int speed, double time)
{
    
    double startTime = seconds(); //used to keep track of time
    double theta = 0; //keeps track of how much the robot has turned
    while(seconds() - startTime < time)
    {
        //if the robot is essentially straight then just drive straight
        if(theta < 1000 && theta > -1000)
        {
            mav(right_motor, speed);
            mav(left_motor, speed);
        }
        //if the robot is off to the right then drift to the left
        else if(theta < 1000)
        {
            mav(right_motor, speed + 100);
            mav(left_motor, speed - 100);
        }
        //if the robot is off to the left then drift to the right
        else
        {
            mav(right_motor, speed - 100);
            mav(left_motor, speed + 100);
        }
        //updates theta
        msleep(10);
        theta += (gyro_z() - bias) * 10;
    }
}
void slow_servo(int port, int pos){
 	int currentPos = get_servo_position(port);
    int amtIncrement = 0;
    amtIncrement = (pos-currentPos)/20;
    int i = 0;
    for(i; i<20; i++){
     	currentPos += amtIncrement;
    	set_servo_position(port, currentPos);
    	msleep(100);
    }
}

void square_up_line(int opposite){
    printf("HERE");
	while(analog(left_light_sensor)<line_follow&&analog(left_light_sensor)<line_follow){
        if(analog(left_light_sensor)<line_follow&&analog(right_light_sensor)<line_follow){
            mav(right_motor, 600*opposite);
            mav(left_motor, 600*opposite);
            printf("1");
        }
        else if(analog(left_light_sensor)<line_follow&&analog(right_light_sensor)>line_follow){
            mav(right_motor, 0);
            mav(left_motor, 600*opposite);        
        }
        else{
            mav(right_motor, 600*opposite);     
            mav(left_motor, 0);

        }
        msleep(10);
    }
}
